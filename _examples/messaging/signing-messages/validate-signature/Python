# To run this code, replace the MyHandler in
# https://wiki.python.org/moin/BaseHttpServer With the following code,
import urllib
import time
import BaseHTTPServer
import re
import json
from urlparse import urlparse, parse_qs
from datetime import datetime
import datetime
import collections
import md5
import calendar

security_secret = 'SECURITY_SECRET'

class MyHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    def do_GET(s):
        """Tell Nexmo that you have recieved the GET request."""
        s.send_response(200)
        s.send_header("Content-type", "text/html")
        s.end_headers()
        """Parse parameters in the GET request"""
        parsed_path = urlparse(s.path)
        try:
                callback = dict(
                [p.split('=') for p in parsed_path[4].split('&')])
        except:
                callback = {}

        # Check if the callback is signed
        if 'sig' in callback:
            # Message cannot be more than 5 minutes old
            # The timestamps used in the signature are in UTC
            # Create a UTC timestamp for now and compare
            d = datetime.utcnow()
            now = calendar.timegm(d.utctimetuple())
            message_timestamp = int( callback['timestamp'])
            max_delta = 5 * 60
            difference = abs(now - message_timestamp)
            if (difference >  max_delta ):
                print("Timestamp difference greater than 5 minutes")
            else:
                # Remove the signature from the request parameters
                message_signature = callback['sig']
                del callback['sig']
                # Sort the parameters into alphabetic order
                sortedparams = collections.OrderedDict(sorted(callback.items()))
                # Remove the encoding from the timestamp, then put it back in the params
                tempstamp = sortedparams['message-timestamp']
                tempstamp = urllib.unquote_plus(tempstamp).decode('utf8')
                sortedparams['message-timestamp'] = tempstamp
                # Generate a signature from the parameters and your security secret
                encoded_params = urllib.urlencode(sortedparams)
                signing_url = '&' + urllib.unquote_plus(encoded_params).decode('utf8')
                signing_url += security_secret
                m = md5.new()
                m.update(signing_url)
                generated_signature = m.hexdigest()
                # Validate that the signatures match
                if ( constant_time_compare (message_signature, generated_signature)):
                    print("Message was sent by Nexmo")
                else :
                    print("Alert: message not sent by Nexmo!")

        else:
            print "This callback has not been signed"

# A timing attack safe string comparison
def constant_time_compare(val1, val2):
    """
    Returns True if the two strings are equal.
    This function executes in constant time only when the two strings have the same length
    """
    if len(val1) != len(val2):
        return False
    result = 0
    for x, y in zip(val1, val2):
        result |= ord(x) ^ ord(y)
    return result == 0
